{"version":3,"sources":["utils/utils.js","components/Progress.jsx","components/Task.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","generateId","Math","random","toString","substr","Progress","react_default","a","createElement","className","style","width","this","props","value","backgroundColor","Component","Task","type","name","id","onChange","onToggle","checked","htmlFor","label","onClick","onDelete","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleAddTask","bind","assertThisInitialized","tasks","JSON","parse","localStorage","getItem","setState","ev","keyCode","state","utils","text","target","_this2","Fragment","onKeyDown","placeholder","Progress_Progress","entries","filter","i","length","map","item","Task_Task","key","onEdit","handleEdit","handleToggle","handleDelete","React","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.13384485.chunk.js","sourcesContent":["module.exports= {\n    generateId: function() {\n        return '_' + Math.random().toString(36).substr(2, 9);\n    } \n}\n\n","import React, { Component } from 'react'\n\nexport default class Progress extends Component {\n    render() {\n        return (\n            <div className=\"progress\">\n                <span style={{width: this.props.value + '%', backgroundColor: this.props.value === 100 ? '#499167' : '#7f7979' }}></span>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport 'boxicons'\n\nexport default class Task extends Component {\n    render() {\n        return (\n            <li className=\"task-list__task--cont\">\n                <input\n                    type=\"checkbox\"\n                    name=\"checkbox\"\n                    id={this.props.id}\n                    className=\"task-list__task--checkbox\"\n                    onChange={this.props.onToggle}\n                    checked={this.props.checked}\n                />\n                <label htmlFor={this.props.id}>{this.props.label}</label>\n                <button onClick={this.props.onDelete} className=\"task-list__task--delete\">&mdash;</button>\n            </li>\n        )\n    }\n}\n","import React from 'react';\nimport utils from './utils/utils';\nimport Progress from './components/Progress';\nimport Task from './components/Task';\n\nexport default class App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.handleAddTask = this.handleAddTask.bind(this);\n    }\n\n    componentWillMount() {\n        let tasks = JSON.parse(localStorage.getItem('tasks'))\n        this.setState({tasks});\n    }\n\n    componentWillUnmount() {\n        // localStorage.setItem('tasks', JSON.stringify(this.state.tasks))\n    }\n\n    handleAddTask(ev) {\n        if(ev.keyCode !== 13) return;\n\n        let tasks = this.state.tasks;\n        tasks[utils.generateId()] = {\n            text: ev.target.value,\n            state: 0\n        }\n\n        this.setState({tasks})\n        ev.target.value = \"\";\n    }\n\n    handleToggle(id) {\n        let tasks = this.state.tasks;\n        tasks[id].state = (tasks[id].state === 1) ? 0 : 1\n        this.setState({tasks})\n    }\n\n    handleDelete(id) {\n        let tasks = this.state.tasks;\n        delete tasks[id];\n        this.setState({tasks})\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <input className=\"task-input\" type=\"text\" onKeyDown={this.handleAddTask} placeholder=\"Add your task 📝\"/>\n                <Progress\n                    value={(Object.entries(this.state.tasks).filter(i => i[1].state !== 0).length / Object.entries(this.state.tasks).length) * 100}\n                />\n                <ul className=\"task-list\">{Object.entries(this.state.tasks).map(item =>{\n                        return (<Task \n                            label={item[1].text}\n                            key={item[0]}\n                            id={item[0]}\n                            checked={item[1].state === 1}\n                            onEdit={this.handleEdit}\n                            onToggle={() => this.handleToggle(item[0])}\n                            onDelete={() => this.handleDelete(item[0])}\n                        />)\n                    })}\n                </ul>\n            </React.Fragment>\n        )\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'boxicons';\nimport './css/style.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app\nserviceWorker.unregister();\n"],"sourceRoot":""}